functions {
  // modified from Week 1 to only return a row vector of size 2
  row_vector binormal_rng(real mu_X, real mu_Y, real sigma_X, real sigma_Y, real rho) {
    real beta = rho * sigma_Y / sigma_X;
    real sigma = sigma_Y * sqrt(1 - square(rho));
    real x = normal_rng(mu_X, sigma_X);
    real y = normal_rng(mu_Y + beta * (x - mu_X), sigma);
    return [x, y];
  }
  
  // this version adds a shift for women in both parts of the model
  matrix selection_rng(int S, vector female, vector loc, vector scal) {
    int N = rows(female);
    matrix[S, N] draws;
    for (s in 1:S) {
      real alpha_1 = normal_rng(loc[1], scal[1]);
      real alpha_2 = normal_rng(loc[2], scal[2]);
      real beta_1  = normal_rng(loc[3], scal[3]);
      real beta_2  = normal_rng(loc[4], scal[4]);
      real rho = uniform_rng(0, 0.9);
      for (n in 1:N) {
        row_vector[2] epsilon = binormal_rng(0, 0, 1, 1, rho);
        real eta_1 = alpha_1 + female[n] * beta_1 + epsilon[1];
        if (eta_1 < 0) draws[s, n] = -1;
        else {
          real eta_2 = alpha_2 + female[n] * beta_2 + epsilon[2];
          draws[s, n] = eta_2 > 0;
        }
      }
    }
    return draws;
  }
}
